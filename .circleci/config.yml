version: 2.1
executors:
  app:
    docker:
      - image: circleci/ruby:2.6.5-node
        environment:
            RAILS_ENV: test
            PGHOST: 127.0.0.1
            PGUSER: postgres
            PARALLEL_TEST_PROCESSORS: 3
      - image: circleci/postgres:9.5-alpine

commands:
  load_cache:
    description: Restore bundle and node
    steps:
      - restore_cache:
          name: Restoring Bundle Cache
          key: cache-bundle-{{ checksum "Gemfile.lock" }}
      - restore_cache:
          name: Restoring Node Module Cache
          key: cache-node_modules-{{ checksum "package-lock.json" }}
  dump_cache:
    description: Dump bundle and node
    steps:
      - save_cache:
          name: Save Bundle Cache
          key: cache-bundle-{{ checksum "Gemfile.lock" }}
          paths:
            - ./vendor/bundle
      - save_cache:
          name: Save Node Module Cache
          key: cache-node_modules-{{ checksum "package-lock.json" }}
          paths:
            - ./node_modules
  update_node:
    steps:
      - run:
          name: npm update
          command: |
            NODE_VERSION="v$(cat .node-version)"
            curl -sSL "https://nodejs.org/dist/$NODE_VERSION/node-$NODE_VERSION-linux-x64.tar.xz" | sudo tar --strip-components=2 -xJ -C /usr/local/bin/ node-$NODE_VERSION-linux-x64/bin/node
            curl -s https://www.npmjs.com/install.sh | sudo bash
  bundler_install:
    steps:
      - run:
          name: Bundler install
          command: |
            gem update --system
            gem install bundler -v 2.1.4
      - run: bundle install --jobs=3 --retry=3 --deployment --path=./vendor/bundle
  setup_test:
    steps:
      - run:
          name: npm のインストール
          command: npm install
  setup_db:
    steps:
      - run:
          name: データベースのセットアップ
          command: bundle exec rake parallel:create parallel:migrate
  checkout_merge:
    steps:
      - run:
          name: 'Checkout merged branch'
          command: |
            if [[ -n "${CIRCLE_PULL_REQUEST}" ]]; then
                # TODO: Any ways to get PR destination branch dynamically?
                PR_DEST_BRANCH=master

                # CIRCLE_PR_NUMBER is available only if PR is created from a fork (unavailable if created from a branch).
                # So, manually construct it from CIRCLE_PULL_REQUEST environment variable.
                CIRCLE_PR_NUMBER=$(basename "${CIRCLE_PULL_REQUEST}")

                # Update PR refs for testing.
                FETCH_REFS="+${PR_DEST_BRANCH}:${PR_DEST_BRANCH}"
                FETCH_REFS="${FETCH_REFS} +refs/pull/${CIRCLE_PR_NUMBER}/head:pull/${CIRCLE_PR_NUMBER}/head"
                FETCH_REFS="${FETCH_REFS} +refs/pull/${CIRCLE_PR_NUMBER}/merge:pull/${CIRCLE_PR_NUMBER}/merge"

                # Retrieve the refs
                echo "git fetch -u origin ${FETCH_REFS}"
                git fetch -u origin ${FETCH_REFS}

                # Checkout PR destination branch and merge PR head ref.
                # If conflicts occur, exit with non-zero.
                echo "git checkout ${PR_DEST_BRANCH}"
                git checkout "${PR_DEST_BRANCH}"
                git config user.name 'foo' # Need to configure something to git merge
                git config user.email 'foo@example.com'
                echo "git merge --no-commit \"pull/${CIRCLE_PR_NUMBER}/head\""
                git merge --no-commit "pull/${CIRCLE_PR_NUMBER}/head"
            fi
  rspec:
    steps:
      - run:
          name: RSpec 実行
          command: |
            bundle exec parallel_rspec --test-options '--order rand' spec
  lint:
    steps:
      - run:
          name: Rubocop 実行
          command: |
            bundle exec rubocop
  jest:
    steps:
      - run:
          name: jest
          command: |
            node -v
            npm run test

jobs:
  build_and_test: # ローカルで全部実行用
    executor: app
    steps:
      - checkout
      - load_cache
      - update_node
      - bundler_install
      - setup_test
      - dump_cache
      - setup_db
      - rspec
      - lint
      - jest
  build:
    executor: app
    steps:
      - checkout
      - load_cache
      - update_node
      - bundler_install
      - setup_test
      - dump_cache
  test:
    executor: app
    steps:
      - checkout
      - load_cache
      - bundler_install
      - setup_db
      - rspec
  lint:
    executor: app
    steps:
      - checkout
      - load_cache
      - bundler_install
      - lint
      - jest
  merge_test:
    executor: app
    steps:
      - checkout
      - checkout_merge
      - load_cache
      - bundler_install
      - setup_db
      - rspec
      - lint
      - jest

workflows:
  version: 2
  build_and_spec:
    jobs:
#      - build_and_test
      - build
      - test:
          requires:
            - build
      - lint:
          requires:
            - build
      - merge_test:
          requires:
            - build
          filters:
            branches:
              ignore:
                - master
